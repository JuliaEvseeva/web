/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.web.firebase;

import com.google.api.client.http.ByteArrayContent;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.database.utilities.Clock;
import com.google.firebase.database.utilities.DefaultClock;
import com.google.firebase.database.utilities.OffsetClock;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import static com.google.api.client.http.ByteArrayContent.fromString;
import static com.google.common.net.MediaType.JSON_UTF_8;
import static com.google.firebase.database.utilities.PushIdGenerator.generatePushChildName;

/**
 * The Firebase database node value.
 */
final class FirebaseNodeValue {

    private final JsonObject value;

    private FirebaseNodeValue(JsonObject value) {
        this.value = value;
    }

    /**
     * Creates an empty {@code FirebaseNodeValue}.
     *
     * <p>This is not equivalent to the {@code null} value, an empty value is supposed to be
     * filled with entries at some point after the creation.
     */
    FirebaseNodeValue() {
        this.value = new JsonObject();
    }

    /**
     * Creates a {@code FirebaseNodeValue} whose underlying {@link com.google.gson.JsonObject} is
     * parsed from the given {@code String}.
     */
    static FirebaseNodeValue from(String json) {
        JsonParser parser = new JsonParser();
        JsonObject value = parser.parse(json)
                                 .getAsJsonObject();
        return new FirebaseNodeValue(value);
    }

    /**
     * Creates a {@code FirebaseNodeValue} which has a single entry under a generated key.
     *
     * @see ChildKeyGenerator
     */
    static FirebaseNodeValue withSingleChild(String childValue) {
        FirebaseNodeValue nodeValue = new FirebaseNodeValue();
        nodeValue.pushData(childValue);
        return nodeValue;
    }

    /**
     * Converts the value to the {@linkplain com.google.api.client.http.ByteArrayContent byte
     * array} suitable for usage in the HTTP request.
     */
    ByteArrayContent toByteArray() {
        ByteArrayContent result = fromString(JSON_UTF_8.toString(), value.toString());
        return result;
    }

    /**
     * Adds a child to the value.
     *
     * <p>The key for the child is generated via
     * {@linkplain com.google.firebase.database.utilities.PushIdGenerator standard Firebase
     * generation mechanism}.
     *
     * @return the generated key under which the data was stored
     */
    @CanIgnoreReturnValue
    String pushData(String data) {
        String key = ChildKeyGenerator.newKey();
        value.addProperty(key, data);
        return key;
    }

    /**
     * Adds a child to the value under a specified key.
     */
    void addChild(String key, String data) {
        value.addProperty(key, data);
    }

    JsonObject underlyingJson() {
        return value;
    }

    /**
     * The generator of the push child keys which mimics how the keys are generated by the
     * Firebase Admin SDK.
     */
    private static class ChildKeyGenerator {

        private static final Clock CLOCK = new OffsetClock(new DefaultClock(), 0);

        private static String newKey() {
            return generatePushChildName(CLOCK.millis());
        }
    }
}
