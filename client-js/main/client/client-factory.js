import KnownTypes from './known-types';
import TypeParsers from './parser/type-parsers';
import {HttpClient} from './http-client';
import {HttpEndpoint} from './http-endpoint';
import {FirebaseDatabaseClient} from './firebase-database-client';
import {ActorRequestFactory} from './actor-request-factory';
import {FirebaseSubscriptionService} from './firebase-subscription-service';
import {FirebaseClient} from './firebase-client';
import {Client} from './client';

/**
 * @typedef {Object} ClientOptions a type of object for initialization of Spine client
 *
 * @property {!Array<Object>} protoIndexFiles               the list of the `index.js` files generated by
 * {@link https://github.com/SpineEventEngine/base/tree/master/tools/proto-js-plugin the Protobuf plugin for JS}
 * @property {?string} endpointUrl                          the Spine web backend endpoint URL
 * @property {?firebase.database.Database} firebaseDatabase the Firebase Database that will be used to retrieve data from
 * @property {?ActorProvider} actorProvider                 the provider of the user interacting with Spine
 * @property {?Client} implementation                       the custom implementation of `Client`
 */

/**
 * An abstract factory for creation of `Client` instances.
 *
 * Ensures that the `ClientOptions` contain list of the `index.js` files generated by
 * {@link https://github.com/SpineEventEngine/base/tree/master/tools/proto-js-plugin the Protobuf plugin for JS}
 * and performs their registration.
 *
 * Creation of the concrete implementation of `Client` is delegated to inheritors.
 */
class AbstractClientFactory {

  /**
   * Creates a new instance of `Client` implementation in accordance with given options.
   *
   * @param {ClientOptions} options client initialization options
   * @return {Client} a `Client` implementation
   */
  createClient(options) {
    this._ensureOptionsSufficient(options);
    AbstractClientFactory.registerTypes(...options.protoIndexFiles);
    return this._clientFor(options);
  }

  /**
   * Creates a new instance of `Client` implementation in accordance with given options.
   *
   * @param {ClientOptions} options
   * @return {Client}
   * @private
   */
  _clientFor(options) {
    throw new Error('Not implemented in the abstract base')
  }

  /**
   * Ensures whether options object is sufficient for client initialization.
   * @param options
   * @private
   */
  _ensureOptionsSufficient(options) {
    const indexFiles = options.protoIndexFiles;
    if (!Array.isArray(indexFiles) || indexFiles.length === 0) {
      throw new Error('Only a non-empty array is allowed as ClientOptions.protoIndexFiles parameter.')
    }

    indexFiles.forEach(indexFile => {
      if (typeof indexFile !== 'object'
          || !(indexFile.types instanceof Map)
          || !(indexFile.parsers instanceof Map) ) {
        throw new Error('Unable to register Protobuf index files.' +
          ' Check the `ClientOptions.protoIndexFiles` contains files' +
          ' generated with "io.spine.tools:spine-proto-js-plugin".');
      }
    });
  }

  /**
   * Registers all Protobuf types provided by the specified modules.
   *
   * After the registration, the types can be used and parsed correctly.
   *
   * @param protoIndexFiles the index.js files generated by
   * {@link https://github.com/SpineEventEngine/base/tree/master/tools/proto-js-plugin the Protobuf plugin for JS}
   */
  static registerTypes(...protoIndexFiles) {
    for (let indexFile of protoIndexFiles) {
      this._registerTypes(indexFile);
    }
  }

  static _registerTypes(indexFile) {
    for (let [typeUrl, type] of indexFile.types) {
      KnownTypes.register(type, typeUrl);
    }
    for (let [typeUrl, parserType] of indexFile.parsers) {
      TypeParsers.register(new parserType(), typeUrl);
    }
  }
}

/**
 * An implementation of the `AbstractClientFactory` that creates a client instance
 * provided in `ClientOptions` parameter.
 */
class FirebaseClientFactory extends AbstractClientFactory {

  /**
   * Creates a new `FirebaseClient` instance which will send the requests on behalf of the provided
   * actor to the provided endpoint, retrieving the data from the provided Firebase storage.
   *
   * Expects that given options contain backend endpoint URL, firebase Database instance and
   * the actor provider.
   *
   * @param {ClientOptions} options
   * @return {Client} a new backend client instance which will send the requests on behalf
   *                          of the provided actor to the provided endpoint, retrieving the data
   *                          from the provided Firebase storage
   * @override
   */
  _clientFor(options) {
    const httpClient = new HttpClient(options.endpointUrl);
    const endpoint = new HttpEndpoint(httpClient);
    const firebaseDatabaseClient = new FirebaseDatabaseClient(options.firebaseDatabase);
    const requestFactory = new ActorRequestFactory(options.actorProvider);
    const subscriptionService = new FirebaseSubscriptionService(endpoint);

    return new FirebaseClient(endpoint, firebaseDatabaseClient, requestFactory, subscriptionService);
  }

  /**
   * @override
   */
  _ensureOptionsSufficient(options) {
    super._ensureOptionsSufficient(options);
    const optionMissingError = (missingOption) =>
        `Unable to initialize Client with Firebase storage. The ClientOptions.${missingOption} not specified.`;
    if (!options.endpointUrl) {
      throw new Error(optionMissingError('endpointUrl'));
    }
    if (!options.firebaseDatabase) {
      throw new Error(optionMissingError('firebaseDatabase'));
    }
    if (!options.actorProvider) {
      throw new Error(optionMissingError('endpointUrl'));
    }
  }
}

/**
 * An implementation of the `AbstractClientFactory` that returns a client instance
 * provided in `ClientOptions` parameter.
 */
class CustomClientFactory extends AbstractClientFactory {

  /**
   * Returns a custom Client implementation provided in options. Expects that the
   * given options contain an implementation which extends `Client`.
   *
   * Can be used to provide mock implementations of `Client`.
   *
   * @param {ClientOptions} options
   * @return {Client} a custom `Client` implementation provided in options
   * @override
   */
  _clientFor(options) {
    return options.implementation;
  }

  /**
   * @override
   */
  _ensureOptionsSufficient(options) {
    super._ensureOptionsSufficient(options);
    const customClient = options.implementation;
    if (!customClient || !(customClient instanceof Client)) {
      throw new Error('Unable to initialize custom implementation.' +
        ' The ClientOptions.implementation should extend Client.');
    }
  }
}

/**
 * The main entry point of the `spine-web` JS library. Serves for initialization
 * of the `Client` instances to interact with Spine-based backend.
 *
 * To initialize a new instance of client that uses Firebase as a storage do the following:
 * ```
 *  import * as protobufs from './proto/index.js';
 *  import * as spineWeb from 'spine-web';
 *
 *  const firebaseApp = Firebase.initializeApp({...Firebase options});
 *
 *  // The backend client will receive updates of the current actor through this instance
 *  const actorProvider = new ActorProvider();
 *
 *  const client = spineWeb.initializeClient({
 *      protoIndexFiles: [protobufs],
 *      endpointUrl: 'http://example.appspot.com',
 *      firebaseDatabase: firebaseApp.database(),
 *      actorProvider: actorProvider
 *  });
 * ```
 *
 * To substitute a custom implementation of `Client` for tests do the following:
 * ```
 *  // An instance of class extending `spineWeb.Client`
 *  const mockClientImpl = new MockClient();
 *
 *  const mockClient = spineWeb.initializeClient({
 *      protoIndexFiles: [protobufs],
 *      implementation: mockClientImpl
 *  });
 * ```
 * Note, when using of custom `Client` implementation protobuf index files
 * registration is still required.
 *
 * @param {ClientOptions} options
 * @return {Client}
 */
export function initializeClient(options) {
  let clientFactory;

  if (!!options.firebaseDatabase) {
    clientFactory = new FirebaseClientFactory();
  } else {
    clientFactory = new CustomClientFactory();
  }

  return clientFactory.createClient(options);
}
